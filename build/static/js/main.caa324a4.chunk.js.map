{"version":3,"sources":["config.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","props","maxLength","allowedStrikes","defaultStrikes","Array","fill","icon","guess","isClient","URL","window","location","href","searchParams","get","handleKeyPress","event","key","toUpperCase","length","match","state","guesses","includes","console","log","pickAQuote","quotes","random","Math","floor","setState","currentQuote","text","quoteAuthor","author","isRevealed","letter","gameOver","oldStrikes","strikes","pop","strikeout","puzzleComplete","firebase","database","ref","push","set","then","_","newGame","a","confirm","remove","splitQuote","split","badGuesses","filter","s","map","unrevealed","message","letters","from","initializeApp","fetch","response","json","fetchedQuotes","quote","on","exists","val","id","onKeyUp","this","className","word","index","letterIndex","strike","disabled","onClick","Component","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.caa324a4.chunk.js","sourcesContent":["export const config = {\n\tapiKey: \"AIzaSyDXEX4wpvKWODAsJNG0WjBlnGHtyIUdXnw\",\n\tauthDomain: \"general-development-purpose.firebaseapp.com\",\n\tdatabaseURL: \"https://general-development-purpose.firebaseio.com\",\n\tprojectId: \"general-development-purpose\",\n\tstorageBucket: \"general-development-purpose.appspot.com\",\n\tmessagingSenderId: \"995124146105\",\n\tappId: \"1:995124146105:web:c48b020deb2c2a8793d068\"\n};\n","import React, { Component } from 'react';\nimport './App.scss';\nimport firebase from 'firebase';\nimport { config } from './config';\n\nexport default class App extends Component<any, any> {\n\tprivate maxLength = 40;\n\tprivate allowedStrikes = 3;\n\tprivate defaultStrikes = new Array(this.allowedStrikes).fill({ icon: '‚ö™', guess: '' });\n\tprivate isClient = (new URL(window.location.href)).searchParams.get(\"isClient\") !== null;\n\n\tconstructor(props: any) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tletters: Array.from('ABCDEFGHIJKLMNOPQRSTUVWXYZ'),\n\t\t\tquotes: [], //Filled by the mounted hook\n\t\t\tcurrentQuote: '', //Filled by the mounted hook\n\t\t\tquoteAuthor: '',\n\t\t\tguesses: [],\n\t\t\tstrikes: [ ...this.defaultStrikes ],\n\t\t\tgameOver: false\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tconsole.log('did mount');\n\t\tfirebase.initializeApp(config);\n\t\tfirebase.database().ref('/demo').remove().then(() => {\n\t\t\tfetch('https://type.fit/api/quotes')\n\t\t\t\t.then((response) => response.json())\n\t\t\t\t.then((fetchedQuotes) => {\n\t\t\t\t\tfetchedQuotes = fetchedQuotes.filter((quote: any) => quote.text.length <= this.maxLength);// Get rid of any quotes that are too long\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tquotes: fetchedQuotes,\n\t\t\t\t\t});\n\t\t\t\t\tthis.pickAQuote();\n\n\t\t\t\t\tif (this.isClient) {\n\t\t\t\t\t\tfirebase.database().ref('/demo').on('child_added', (event) => {\n\t\t\t\t\t\t\tif (event.exists()) {\n\t\t\t\t\t\t\t\tconsole.log(event.val());\n\t\t\t\t\t\t\t\tthis.guess(event.val().letter);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t});\n\t}\n\n\tprivate handleKeyPress = (event: any) => {\n\t\tconst key: string = event.key.toUpperCase()\n\t\tif (key.length === 1 && key.match(/[a-zA-Z]/) && !this.state.guesses.includes(key)) {\n\t\t\tconsole.log(key)\n\t\t\tthis.guess(key)\n\t\t}\n\t};\n\n\tprivate pickAQuote = () => {\n\t\tconsole.log(this.state.quotes);\n\t\tconst random = Math.floor(Math.random() * this.state.quotes.length)\n\t\tthis.setState({\n\t\t\tcurrentQuote: this.state.quotes[random].text.toUpperCase(),\n\t\t\tquoteAuthor: this.state.quotes[random].author,\n\t\t});\n\t};\n\n\tprivate isRevealed = (letter: string) => {\n\t\tif (!letter.match(/[a-zA-Z\\s]/)) {\n\t\t\treturn letter\n\t\t}\n\t\treturn this.state.guesses.includes(letter) || this.state.gameOver ? letter : '_'\n\t};\n\n\tprivate guess = (letter: string) => {\n\t\tif (!this.isClient) {\n\t\t\tconst key = firebase.database().ref('/demo').push().key;\n\t\t\tfirebase.database().ref(`/demo/${ key }`).set({\n\t\t\t\tletter\n\t\t\t}).then(_ => {\n\t\t\t});\n\n\t\t\treturn;\n\t\t}\n\n\t\tconsole.log(letter);\n\t\tthis.setState({\n\t\t\tguesses: [ ...this.state.guesses, letter ],\n\t\t});\n\t\tif (!this.state.currentQuote.includes(letter)) {\n\t\t\tlet oldStrikes = this.state.strikes;\n\t\t\toldStrikes.pop();\n\t\t\tthis.setState({\n\t\t\t\tstrikes: [ { icon: 'üö´', guess: letter }, ...oldStrikes ],\n\t\t\t});\n\t\t}\n\t\tif (this.strikeout() || this.puzzleComplete()) {\n\t\t\tthis.setState({\n\t\t\t\tgameOver: true,\n\t\t\t});\n\t\t}\n\t};\n\n\tprivate newGame = async () => {\n\t\tconst confirmation = window.confirm('End this game and start a new one?')\n\t\tif (!confirmation) return\n\n\t\tawait firebase.database().ref('/demo').remove();\n\t\tthis.pickAQuote()\n\t\tthis.setState({\n\t\t\tguesses: [],\n\t\t\tstrikes: [ ...this.defaultStrikes ],\n\t\t\tgameOver: false,\n\t\t});\n\t};\n\n\tprivate splitQuote = () => {\n\t\treturn this.state.currentQuote.split(' ');\n\t};\n\tprivate badGuesses = () => {\n\t\treturn this.state.strikes.filter((s: any) => s.guess).map((s: any) => s.guess);\n\t};\n\tprivate strikeout = () => {\n\t\treturn this.badGuesses().length >= this.allowedStrikes;\n\t};\n\tprivate puzzleComplete = () => {\n\t\treturn this.unrevealed() === 0;\n\t};\n\tprivate unrevealed = () => {\n\t\treturn this.state.currentQuote.split('').filter((letter: string) => {\n\t\t\treturn letter.match(/[a-zA-Z]/) && !this.state.guesses.includes(letter)\n\t\t}).length;\n\t};\n\tprivate message = () => {\n\t\tif (!this.state.gameOver) {\n\t\t\treturn '‚òùÔ∏è Pick a letter'\n\t\t} else if (this.strikeout()) {\n\t\t\treturn '‚ùå You lost this round. Try again?'\n\t\t} else if (this.puzzleComplete()) {\n\t\t\treturn 'üéâ You win!'\n\t\t}\n\t\t//You can never be too safe ¬Ø\\_(„ÉÑ)_/¬Ø\n\t\treturn 'üò¨ Unforeseen error state, maybe try a new game?'\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<main id=\"app\" onKeyUp={ this.handleKeyPress }>\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<h3>Simon Realtime Demo</h3>\n\t\t\t\t\t{ this.isClient && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<p id=\"quote\"\n\t\t\t\t\t\t\t   className={ (this.strikeout() ? 'strike ' : '') + (this.puzzleComplete() ? 'highlight' : '') }>\n\t\t\t\t\t\t\t\t{ this.splitQuote().map((word: string, index: number) => {\n\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t<span key={ `word-${ index }` }>\n\t\t\t\t\t\t\t\t{ word.split('').map((letter, letterIndex) => {\n\t\t\t\t\t\t\t\t\treturn this.isRevealed(letter);\n\t\t\t\t\t\t\t\t}) }\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\t}) }\n\t\t\t\t\t\t\t\t{ this.state.gameOver && (<small>\n\t\t\t\t\t\t\t\t\t‚Äî{ this.state.quoteAuthor }\n\t\t\t\t\t\t\t\t</small>) }\n\t\t\t\t\t\t\t</p>\n\n\t\t\t\t\t\t\t<div className=\"status\">\n\t\t\t\t\t\t\t\t<h2>Strikes:</h2>\n\t\t\t\t\t\t\t\t<ul className=\"status\">\n\t\t\t\t\t\t\t\t\t{ this.state.strikes.map((strike: any, index: number) => (\n\t\t\t\t\t\t\t\t\t\t<li key={ `strike-${ index }` }>{ strike.icon }</li>\n\t\t\t\t\t\t\t\t\t)) }\n\t\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) }\n\n\t\t\t\t\t{ !this.isClient && (\n\t\t\t\t\t\t<div id=\"button-board\">\n\t\t\t\t\t\t\t{ this.state.letters.map((letter: string, index: number) => (\n\t\t\t\t\t\t\t\t<button\n\t\t\t\t\t\t\t\t\tclassName={ (this.badGuesses().includes(letter) ? 'strike ' : '') + (this.state.guesses.includes(letter) ? 'highlight' : '') }\n\t\t\t\t\t\t\t\t\tdisabled={ this.state.guesses.includes(letter) || this.state.gameOver }\n\t\t\t\t\t\t\t\t\tonClick={ event => this.guess(letter) } key={ `button-${ index }` }>\n\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\tclassName={ 'letter ' + this.state.guesses.includes(letter) ? 'riser' : '' }>{ letter }</span>\n\t\t\t\t\t\t\t\t\t<span className=\"background\"></span>\n\t\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t\t)) }\n\t\t\t\t\t\t</div>\n\t\t\t\t\t) }\n\n\t\t\t\t\t{ this.isClient && (\n\t\t\t\t\t\t<>\n\t\t\t\t\t\t\t<div className=\"status\">\n\t\t\t\t\t\t\t\t<p>{ this.message() }</p>\n\t\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t\t<button id=\"new-game\" className={ this.state.gameOver ? 'highlight' : '' }\n\t\t\t\t\t\t\t\t\tonClick={ event => this.newGame() }>New\n\t\t\t\t\t\t\t\tgame\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</>\n\t\t\t\t\t) }\n\t\t\t\t</div>\n\t\t\t</main>\n\t\t);\n\t}\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App/>\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}