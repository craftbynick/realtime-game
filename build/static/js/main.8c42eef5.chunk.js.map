{"version":3,"sources":["config.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["config","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","App","props","defaultStrikes","Array","fill","icon","guess","URL","window","location","href","searchParams","get","useState","from","letters","quotes","setQuotes","guesses","setGuesses","strikes","setStrikes","gameOver","setGameOver","currentQuote","setCurrentQuote","quoteAuthor","setQuoteAuthor","useEffect","firebase","initializeApp","fetch","then","response","json","fetchedQuotes","filter","quote","text","length","pickAQuote","console","log","qu","random","Math","floor","toUpperCase","author","letter","includes","oldStrikes","pop","strikeout","puzzleComplete","badGuesses","s","map","unrevealed","match","id","onKeyUp","event","key","className","split","word","index","letterIndex","isRevealed","strike","disabled","onClick","confirm","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8c42eef5.chunk.js","sourcesContent":["export const config = {\n\tapiKey: \"AIzaSyDXEX4wpvKWODAsJNG0WjBlnGHtyIUdXnw\",\n\tauthDomain: \"general-development-purpose.firebaseapp.com\",\n\tdatabaseURL: \"https://general-development-purpose.firebaseio.com\",\n\tprojectId: \"general-development-purpose\",\n\tstorageBucket: \"general-development-purpose.appspot.com\",\n\tmessagingSenderId: \"995124146105\",\n\tappId: \"1:995124146105:web:c48b020deb2c2a8793d068\"\n};\n","import React, { useEffect, useState } from 'react';\nimport './App.scss';\nimport firebase from 'firebase';\nimport { config } from './config';\n\nexport const App = (props: any) => {\n\tconst maxLength = 40; // (Typically, the lower this number, the harder the puzzle.)\n\n\tconst allowedStrikes = 3; //If you set this and maxLength both too high, the puzzle will be impossible to lose.\n\n\tconst defaultStrikes = new Array(allowedStrikes).fill({ icon: '‚ö™', guess: '' });\n\n\tconst url = new URL(window.location.href);\n\tconst isClient = url.searchParams.get(\"isClient\") !== null;\n\n\tconst [ letters, setLetters ] = useState<Array<any>>(Array.from('ABCDEFGHIJKLMNOPQRSTUVWXYZ'));\n\tconst [ quotes, setQuotes ] = useState<Array<any>>([]);\n\tconst [ guesses, setGuesses ] = useState<Array<string>>([]);\n\tconst [ strikes, setStrikes ] = useState<Array<any>>([ ...defaultStrikes ]);\n\tconst [ gameOver, setGameOver ] = useState<boolean>(false);\n\tconst [ currentQuote, setCurrentQuote ] = useState<string>('');\n\tconst [ quoteAuthor, setQuoteAuthor ] = useState<string>('');\n\n\tuseEffect(() => {\n\t\tfirebase.initializeApp(config);\n\n\t\tfetch('https://type.fit/api/quotes')\n\t\t\t.then((response) => response.json())\n\t\t\t.then((fetchedQuotes) => {\n\t\t\t\tfetchedQuotes = fetchedQuotes.filter((quote: any) => quote.text.length <= maxLength);// Get rid of any quotes that are too long\n\t\t\t\tsetQuotes(fetchedQuotes);\n\t\t\t\tpickAQuote(fetchedQuotes);\n\n\t\t\t\t// const url = new URL(window.location.href);\n\t\t\t\t// if (url.searchParams.get(\"isClient\") !== null) {\n\t\t\t\t// \tfirebase.database().ref('/demo').on('child_added', (event) => {\n\t\t\t\t// \t\tif (event.exists()) {\n\t\t\t\t// \t\t\tconsole.log(event.val());\n\t\t\t\t// \t\t\tguess(event.val().letter);\n\t\t\t\t// \t\t}\n\t\t\t\t// \t});\n\t\t\t\t// }\n\t\t\t});\n\t}, []);\n\n\n\tconst handleKeyPress = (event: any) => {\n\t\tconst key: string = event.key.toUpperCase()\n\t\tif (key.length === 1 && key.match(/[a-zA-Z]/) && !guesses.includes(key)) {\n\t\t\tconsole.log(key)\n\t\t\tguess(key)\n\t\t}\n\t};\n\n\tconst pickAQuote = (fetchedQuotes: Array<any> = []) => {\n\t\tconsole.log(quotes);\n\t\tlet qu = quotes;\n\t\tif (!quotes.length) {\n\t\t\tqu = fetchedQuotes;\n\t\t}\n\t\tconst random = Math.floor(Math.random() * qu.length)\n\t\tsetCurrentQuote(qu[random].text.toUpperCase());\n\t\tsetQuoteAuthor(qu[random].author);\n\t};\n\n\tconst isRevealed = (letter: string) => {\n\t\tif (!letter.match(/[a-zA-Z\\s]/)) {\n\t\t\treturn letter\n\t\t}\n\t\treturn guesses.includes(letter) || gameOver ? letter : '_'\n\t};\n\n\tconst guess = (letter: string) => {\n\t\t// const url = new URL(window.location.href);\n\t\t// if (url.searchParams.get(\"isClient\") === null) {\n\t\t// \tconst key = firebase.database().ref('/demo').push().key;\n\t\t// \tfirebase.database().ref(`/demo/${ key }`).set({\n\t\t// \t\tletter\n\t\t// \t}).then(_ => {\n\t\t// \t});\n\t\t// } else {\n\t\tconsole.log(letter);\n\t\tsetGuesses([ ...guesses, letter ]);\n\t\tif (!currentQuote.includes(letter)) {\n\t\t\tlet oldStrikes = strikes;\n\t\t\toldStrikes.pop();\n\t\t\tsetStrikes([ { icon: 'üö´', guess: letter }, ...oldStrikes ]);\n\t\t}\n\t\tif (strikeout() || puzzleComplete()) {\n\t\t\tsetGameOver(true);\n\t\t\t// if (puzzleComplete()) fireEmAll();\n\t\t}\n\t\t// }\n\t};\n\n\tconst newGame = () => {\n\t\tconst confirmation = window.confirm('End this game and start a new one?')\n\t\tif (!confirmation) return\n\t\tpickAQuote()\n\t\tsetGuesses([]);\n\t\tsetStrikes([ ...defaultStrikes ]);\n\t\tsetGameOver(false);\n\t};\n\n\tconst splitQuote = () => {\n\t\treturn currentQuote.split(' ')\n\t};\n\tconst badGuesses = () => {\n\t\treturn strikes.filter(s => s.guess).map(s => s.guess)\n\t};\n\tconst strikeout = () => {\n\t\treturn badGuesses().length >= allowedStrikes\n\t};\n\tconst puzzleComplete = () => {\n\t\treturn unrevealed() === 0;\n\t};\n\tconst unrevealed = () => {\n\t\treturn [ ...currentQuote ].filter(letter => {\n\t\t\treturn letter.match(/[a-zA-Z]/) && !guesses.includes(letter)\n\t\t}).length\n\t};\n\tconst message = () => {\n\t\tif (!gameOver) {\n\t\t\treturn '‚òùÔ∏è Pick a letter'\n\t\t} else if (strikeout()) {\n\t\t\treturn '‚ùå You lost this round. Try again?'\n\t\t} else if (puzzleComplete()) {\n\t\t\treturn 'üéâ You win!'\n\t\t}\n\t\t//You can never be too safe ¬Ø\\_(„ÉÑ)_/¬Ø\n\t\treturn 'üò¨ Unforeseen error state, maybe try a new game?'\n\t};\n\n\treturn (\n\t\t<main id=\"app\" onKeyUp={ handleKeyPress }>\n\t\t\t<div className=\"container\">\n\t\t\t\t<h3>Simon Realtime Demo</h3>\n\t\t\t\t<p id=\"quote\" className={ (strikeout() ? 'strike ' : '') + (puzzleComplete() ? 'highlight' : '') }>\n\t\t\t\t\t{ splitQuote().map((word, index) => {\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<span key={ `word-${ index }` }>\n\t\t\t\t\t\t\t\t{ word.split('').map((letter, letterIndex) => {\n\t\t\t\t\t\t\t\t\treturn isRevealed(letter);\n\t\t\t\t\t\t\t\t}) }\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t);\n\t\t\t\t\t}) }\n\t\t\t\t\t{ gameOver && (<small>\n\t\t\t\t\t\t‚Äî{ quoteAuthor }\n\t\t\t\t\t</small>) }\n\t\t\t\t</p>\n\n\t\t\t\t<div className=\"status\">\n\t\t\t\t\t<h2>Strikes:</h2>\n\t\t\t\t\t<ul className=\"status\">\n\t\t\t\t\t\t{ strikes.map((strike, index) => (\n\t\t\t\t\t\t\t<li key={ `strike-${ index }` }>{ strike.icon }</li>\n\t\t\t\t\t\t)) }\n\t\t\t\t\t</ul>\n\t\t\t\t</div>\n\n\t\t\t\t<div id=\"button-board\">\n\t\t\t\t\t{ letters.map((letter, index) => (\n\t\t\t\t\t\t<button\n\t\t\t\t\t\t\tclassName={ (badGuesses().includes(letter) ? 'strike ' : '') + (guesses.includes(letter) ? 'highlight' : '') }\n\t\t\t\t\t\t\tdisabled={ guesses.includes(letter) || gameOver }\n\t\t\t\t\t\t\tonClick={ event => guess(letter) } key={ `button-${ index }` }>\n\t\t\t\t\t\t\t\t<span\n\t\t\t\t\t\t\t\t\tclassName={ 'letter ' + guesses.includes(letter) ? 'riser' : '' }>{ letter }</span>\n\t\t\t\t\t\t\t<span className=\"background\"></span>\n\t\t\t\t\t\t</button>\n\t\t\t\t\t)) }\n\t\t\t\t</div>\n\n\t\t\t\t<div className=\"status\">\n\t\t\t\t\t<p>{ message() }</p>\n\t\t\t\t</div>\n\n\t\t\t\t<button id=\"new-game\" className={ gameOver ? 'highlight' : '' } onClick={ event => newGame() }>New\n\t\t\t\t\tgame\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t</main>\n\t);\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}